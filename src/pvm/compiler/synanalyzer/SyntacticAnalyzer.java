
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Jun 25 11:37:27 CEST 2014
//----------------------------------------------------

package pvm.compiler.synanalyzer;

import java.util.List;
import pvm.compiler.abstractsyntax.Ops;
import pvm.compiler.ErrorsHandler;
import pvm.compiler.abstractsyntax.Programa;
import pvm.compiler.abstractsyntax.designador.Designador;
import pvm.compiler.abstractsyntax.exp.Exp;
import pvm.compiler.abstractsyntax.instr.Instruccion;
import pvm.compiler.abstractsyntax.instr.cond.Caso;
import pvm.compiler.abstractsyntax.seccion.SeccionSubprogramas;
import pvm.compiler.abstractsyntax.seccion.SeccionTipos;
import pvm.compiler.abstractsyntax.seccion.SeccionVariables;
import pvm.compiler.abstractsyntax.subprog.DecSubprograma;
import pvm.compiler.abstractsyntax.subprog.param.Parametro;
import pvm.compiler.abstractsyntax.tipo.DecTipo;
import pvm.compiler.abstractsyntax.tipo.Tipo;
import pvm.compiler.lexanalyzer.LexicalAnalyzer;
import pvm.compiler.lexanalyzer.LexicalUnit;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Jun 25 11:37:27 CEST 2014
  */
public class SyntacticAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\006\003\000\002\012\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\007\000\002\015\006\000\002\015\004\000\002\010\005" +
    "\000\002\010\003\000\002\013\005\000\002\007\005\000" +
    "\002\007\003\000\002\014\005\000\002\011\005\000\002" +
    "\011\003\000\002\016\011\000\002\017\005\000\002\017" +
    "\004\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\021\006\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\042\005\000\002\042\004" +
    "\000\002\041\005\000\002\041\003\000\002\024\005\000" +
    "\002\043\006\000\002\043\003\000\002\044\005\000\002" +
    "\025\005\000\002\026\004\000\002\045\005\000\002\045" +
    "\004\000\002\046\005\000\002\046\003\000\002\027\004" +
    "\000\002\030\004\000\002\031\004\000\002\032\004\000" +
    "\002\033\003\000\002\033\006\000\002\033\005\000\002" +
    "\033\004\000\002\034\005\000\002\034\003\000\002\035" +
    "\005\000\002\035\003\000\002\036\005\000\002\036\003" +
    "\000\002\037\004\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\040\005\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\047\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\004\005\001\002\000\004\002\247\001" +
    "\002\000\012\005\007\010\ufffe\011\ufffe\044\ufffe\001\002" +
    "\000\010\010\045\011\ufffc\044\ufffc\001\002\000\004\071" +
    "\010\001\002\000\004\046\015\001\002\000\012\010\ufff8" +
    "\011\ufff8\040\ufff8\044\ufff8\001\002\000\012\010\uffff\011" +
    "\uffff\040\013\044\uffff\001\002\000\004\071\010\001\002" +
    "\000\012\010\ufff9\011\ufff9\040\ufff9\044\ufff9\001\002\000" +
    "\020\006\022\007\021\047\024\050\023\051\020\062\025" +
    "\071\016\001\002\000\022\010\ufff3\011\ufff3\040\ufff3\041" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\052\ufff3\001\002\000\012" +
    "\010\ufff7\011\ufff7\040\ufff7\044\ufff7\001\002\000\022\010" +
    "\ufff5\011\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\052\ufff5\001\002\000\020\006\022\007\021\047\024\050" +
    "\023\051\020\062\025\071\016\001\002\000\004\044\032" +
    "\001\002\000\022\010\ufff4\011\ufff4\040\ufff4\041\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\052\ufff4\001\002\000\022\010\ufff6" +
    "\011\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6\052" +
    "\ufff6\001\002\000\020\006\022\007\021\047\024\050\023" +
    "\051\020\062\025\071\016\001\002\000\004\052\027\001" +
    "\002\000\004\067\030\001\002\000\004\053\031\001\002" +
    "\000\022\010\ufff2\011\ufff2\040\ufff2\041\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\052\ufff2\001\002\000\004\071\033\001\002" +
    "\000\004\046\041\001\002\000\006\040\037\045\036\001" +
    "\002\000\006\040\uffee\045\uffee\001\002\000\022\010\ufff1" +
    "\011\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\052" +
    "\ufff1\001\002\000\004\071\033\001\002\000\006\040\uffef" +
    "\045\uffef\001\002\000\020\006\022\007\021\047\024\050" +
    "\023\051\020\062\025\071\016\001\002\000\006\040\uffed" +
    "\045\uffed\001\002\000\022\010\ufff0\011\ufff0\040\ufff0\041" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\052\ufff0\001\002\000\006" +
    "\011\056\044\ufffa\001\002\000\004\071\046\001\002\000" +
    "\004\046\053\001\002\000\010\011\uffeb\040\uffeb\044\uffeb" +
    "\001\002\000\010\011\ufffd\040\051\044\ufffd\001\002\000" +
    "\004\071\046\001\002\000\010\011\uffec\040\uffec\044\uffec" +
    "\001\002\000\020\006\022\007\021\047\024\050\023\051" +
    "\020\062\025\071\016\001\002\000\010\011\uffea\040\uffea" +
    "\044\uffea\001\002\000\004\044\072\001\002\000\004\012" +
    "\060\001\002\000\006\040\uffe8\044\uffe8\001\002\000\004" +
    "\071\064\001\002\000\006\040\062\044\ufffb\001\002\000" +
    "\004\012\060\001\002\000\006\040\uffe9\044\uffe9\001\002" +
    "\000\004\042\065\001\002\000\010\043\233\056\232\071" +
    "\231\001\002\000\012\005\007\010\ufffe\011\ufffe\044\ufffe" +
    "\001\002\000\010\010\045\011\ufffc\044\ufffc\001\002\000" +
    "\006\011\056\044\ufffa\001\002\000\004\044\072\001\002" +
    "\000\024\013\101\015\105\044\072\045\104\063\076\064" +
    "\102\065\112\066\115\071\103\001\002\000\006\040\uffe7" +
    "\044\uffe7\001\002\000\006\040\uffdb\045\uffdb\001\002\000" +
    "\006\040\uffd8\045\uffd8\001\002\000\004\071\120\001\002" +
    "\000\012\031\226\052\124\054\123\055\122\001\002\000" +
    "\006\040\uffdd\045\uffdd\001\002\000\030\020\125\026\127" +
    "\027\142\030\132\042\135\057\133\060\137\061\145\067" +
    "\131\070\130\071\120\001\002\000\030\020\125\026\127" +
    "\027\142\030\132\042\135\057\133\060\137\061\145\067" +
    "\131\070\130\071\120\001\002\000\014\031\uffc4\042\214" +
    "\052\uffc4\054\uffc4\055\uffc4\001\002\000\020\002\uffd5\014" +
    "\uffd5\016\uffd5\040\uffd5\044\uffd5\045\uffd5\052\uffd5\001\002" +
    "\000\030\020\125\026\127\027\142\030\132\042\135\057" +
    "\133\060\137\061\145\067\131\070\130\071\120\001\002" +
    "\000\006\040\uffdc\045\uffdc\001\002\000\006\040\uffd3\045" +
    "\uffd3\001\002\000\006\040\uffdf\045\uffdf\001\002\000\006" +
    "\040\uffde\045\uffde\001\002\000\004\071\120\001\002\000" +
    "\006\040\uffda\045\uffda\001\002\000\006\040\177\045\176" +
    "\001\002\000\004\071\120\001\002\000\006\040\uffd9\045" +
    "\uffd9\001\002\000\006\040\uffe0\045\uffe0\001\002\000\056" +
    "\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\043\uffc4\045\uffc4\046\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\001\002\000\014\040\uffc5\045\uffc5" +
    "\052\124\054\123\055\122\001\002\000\060\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\043\uffc1\045\uffc1\046\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\001\002\000\004\071\175\001\002\000" +
    "\030\020\125\026\127\027\142\030\132\042\135\057\133" +
    "\060\137\061\145\067\131\070\130\071\120\001\002\000" +
    "\030\020\uffa4\026\uffa4\027\uffa4\030\uffa4\042\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\067\uffa4\070\uffa4\071\uffa4\001\002\000" +
    "\056\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\043\uffb3\045\uffb3\046\uffb3\052\124" +
    "\053\uffb3\054\123\055\122\001\002\000\030\020\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\042\uffa3\057\uffa3\060\uffa3\061\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\001\002\000\050\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\043\uffb4\045\uffb4\046\uffb4\053\uffb4\001\002\000\050" +
    "\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\043\uffb5\045\uffb5\046\uffb5\053\uffb5\001" +
    "\002\000\030\020\uffa1\026\uffa1\027\uffa1\030\uffa1\042\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\067\uffa1\070\uffa1\071\uffa1\001" +
    "\002\000\050\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\045\uffb8\046\uffb8" +
    "\053\uffb8\001\002\000\050\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\032\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043\uffb9\045" +
    "\uffb9\046\uffb9\053\uffb9\001\002\000\030\020\125\026\127" +
    "\027\142\030\132\042\135\057\133\060\137\061\145\067" +
    "\131\070\130\071\120\001\002\000\050\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\043\uffbb\045\uffbb\046\uffbb\053\uffbb\001\002\000\050\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\043\uffb7\045\uffb7\046\uffb7\053\uffb7\001\002" +
    "\000\050\017\uffbd\020\uffbd\021\170\022\167\023\164\024" +
    "\166\025\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\043\uffbd\045\uffbd\046\uffbd\053" +
    "\uffbd\001\002\000\040\017\156\020\151\025\162\032\160" +
    "\033\153\034\157\035\150\036\152\037\161\040\uffbf\041" +
    "\uffbf\043\uffbf\045\uffbf\046\uffbf\053\uffbf\001\002\000\030" +
    "\020\uffa2\026\uffa2\027\uffa2\030\uffa2\042\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\067\uffa2\070\uffa2\071\uffa2\001\002\000\004" +
    "\053\147\001\002\000\030\020\125\026\127\027\142\030" +
    "\132\042\135\057\133\060\137\061\145\067\131\070\130" +
    "\071\120\001\002\000\050\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\043\uffb6\045" +
    "\uffb6\046\uffb6\053\uffb6\001\002\000\050\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\043\uffba\045\uffba\046\uffba\053\uffba\001\002\000\060\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\043\uffc3\045\uffc3\046\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\001\002\000\030\020\uffac\026" +
    "\uffac\027\uffac\030\uffac\042\uffac\057\uffac\060\uffac\061\uffac" +
    "\067\uffac\070\uffac\071\uffac\001\002\000\030\020\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\042\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\067\uffaa\070\uffaa\071\uffaa\001\002\000\030\020\uffae\026" +
    "\uffae\027\uffae\030\uffae\042\uffae\057\uffae\060\uffae\061\uffae" +
    "\067\uffae\070\uffae\071\uffae\001\002\000\030\020\uffad\026" +
    "\uffad\027\uffad\030\uffad\042\uffad\057\uffad\060\uffad\061\uffad" +
    "\067\uffad\070\uffad\071\uffad\001\002\000\030\020\125\026" +
    "\127\027\142\030\132\042\135\057\133\060\137\061\145" +
    "\067\131\070\130\071\120\001\002\000\030\020\125\026" +
    "\127\027\142\030\132\042\135\057\133\060\137\061\145" +
    "\067\131\070\130\071\120\001\002\000\030\020\uffab\026" +
    "\uffab\027\uffab\030\uffab\042\uffab\057\uffab\060\uffab\061\uffab" +
    "\067\uffab\070\uffab\071\uffab\001\002\000\030\020\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\042\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\001\002\000\030\020\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\042\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\001\002\000\030\020\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\042\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\001\002\000\030\020\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\042\uffa9\057\uffa9\060\uffa9\061\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\001\002\000\050\017\uffbe\020" +
    "\uffbe\021\170\022\167\023\164\024\166\025\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\043\uffbe\045\uffbe\046\uffbe\053\uffbe\001\002\000\030" +
    "\020\uffa6\026\uffa6\027\uffa6\030\uffa6\042\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\067\uffa6\070\uffa6\071\uffa6\001\002\000\030" +
    "\020\125\026\127\027\142\030\132\042\135\057\133\060" +
    "\137\061\145\067\131\070\130\071\120\001\002\000\030" +
    "\020\uffa5\026\uffa5\027\uffa5\030\uffa5\042\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\067\uffa5\070\uffa5\071\uffa5\001\002\000\030" +
    "\020\uffa7\026\uffa7\027\uffa7\030\uffa7\042\uffa7\057\uffa7\060" +
    "\uffa7\061\uffa7\067\uffa7\070\uffa7\071\uffa7\001\002\000\030" +
    "\020\uffa8\026\uffa8\027\uffa8\030\uffa8\042\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\067\uffa8\070\uffa8\071\uffa8\001\002\000\050" +
    "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\043\uffbc\045\uffbc\046\uffbc\053\uffbc\001" +
    "\002\000\024\017\156\020\151\025\162\040\uffc0\041\uffc0" +
    "\043\uffc0\045\uffc0\046\uffc0\053\uffc0\001\002\000\004\043" +
    "\174\001\002\000\050\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\032\uffb2\033\uffb2\034\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\043\uffb2\045\uffb2" +
    "\046\uffb2\053\uffb2\001\002\000\060\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\045\uffc2\046\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\055\uffc2\001\002\000\020\002\uffd6\014\uffd6\016\uffd6\040" +
    "\uffd6\044\uffd6\045\uffd6\052\uffd6\001\002\000\022\013\101" +
    "\015\105\044\072\063\076\064\102\065\112\066\115\071" +
    "\103\001\002\000\006\040\uffd4\045\uffd4\001\002\000\014" +
    "\040\uffc6\045\uffc6\052\124\054\123\055\122\001\002\000" +
    "\010\014\uffd0\016\uffd0\052\uffd0\001\002\000\006\016\210" +
    "\052\207\001\002\000\004\046\205\001\002\000\004\044" +
    "\072\001\002\000\010\014\uffcf\016\uffcf\052\uffcf\001\002" +
    "\000\004\053\211\001\002\000\006\040\uffce\045\uffce\001" +
    "\002\000\030\020\125\026\127\027\142\030\132\042\135" +
    "\057\133\060\137\061\145\067\131\070\130\071\120\001" +
    "\002\000\010\014\uffd1\016\uffd1\052\uffd1\001\002\000\006" +
    "\040\uffcd\045\uffcd\001\002\000\032\020\125\026\127\027" +
    "\142\030\132\042\135\043\215\057\133\060\137\061\145" +
    "\067\131\070\130\071\120\001\002\000\006\040\uffcb\045" +
    "\uffcb\001\002\000\006\041\220\043\221\001\002\000\006" +
    "\041\uffc9\043\uffc9\001\002\000\030\020\125\026\127\027" +
    "\142\030\132\042\135\057\133\060\137\061\145\067\131" +
    "\070\130\071\120\001\002\000\006\040\uffcc\045\uffcc\001" +
    "\002\000\006\041\uffca\043\uffca\001\002\000\006\040\uffc7" +
    "\045\uffc7\001\002\000\006\014\225\052\207\001\002\000" +
    "\006\040\uffd2\045\uffd2\001\002\000\030\020\125\026\127" +
    "\027\142\030\132\042\135\057\133\060\137\061\145\067" +
    "\131\070\130\071\120\001\002\000\006\040\uffd7\045\uffd7" +
    "\001\002\000\014\040\uffc8\045\uffc8\052\124\054\123\055" +
    "\122\001\002\000\004\046\244\001\002\000\004\071\241" +
    "\001\002\000\012\005\uffe5\010\uffe5\011\uffe5\044\uffe5\001" +
    "\002\000\006\041\236\043\237\001\002\000\006\041\uffe3" +
    "\043\uffe3\001\002\000\006\056\232\071\231\001\002\000" +
    "\012\005\uffe6\010\uffe6\011\uffe6\044\uffe6\001\002\000\006" +
    "\041\uffe4\043\uffe4\001\002\000\004\046\242\001\002\000" +
    "\020\006\022\007\021\047\024\050\023\051\020\062\025" +
    "\071\016\001\002\000\006\041\uffe1\043\uffe1\001\002\000" +
    "\020\006\022\007\021\047\024\050\023\051\020\062\025" +
    "\071\016\001\002\000\006\041\uffe2\043\uffe2\001\002\000" +
    "\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\043\001\001\000\006" +
    "\006\011\012\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\013\001\001\000\002" +
    "\001\001\000\004\015\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\033\013" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\037\001\001\000" +
    "\002\001\001\000\004\015\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\054\001\001\000\006\007" +
    "\047\014\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\051\001\001\000\002\001" +
    "\001\000\004\015\053\001\001\000\002\001\001\000\004" +
    "\042\245\001\001\000\006\011\060\016\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\062\001\001\000\002\001\001\000\004\017\065\001" +
    "\001\000\006\020\233\021\234\001\001\000\004\003\066" +
    "\001\001\000\004\004\067\001\001\000\004\005\070\001" +
    "\001\000\004\042\072\001\001\000\032\022\106\023\116" +
    "\024\110\025\077\026\105\027\073\030\112\031\115\032" +
    "\074\033\076\041\113\042\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\033\125" +
    "\034\203\035\140\036\137\037\135\040\133\043\223\044" +
    "\201\052\143\001\001\000\020\033\125\034\222\035\140" +
    "\036\137\037\135\040\133\052\143\001\001\000\004\045" +
    "\212\001\001\000\002\001\001\000\024\033\125\034\203" +
    "\035\140\036\137\037\135\040\133\043\202\044\201\052" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\033\125\034\142\035\140\036\137\037\135\040\133\052" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\033\125" +
    "\034\172\035\140\036\137\037\135\040\133\052\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\164" +
    "\001\001\000\006\047\153\050\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\033\125\037\145\040\133" +
    "\052\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\033\125\035\171\036" +
    "\137\037\135\040\133\052\143\001\001\000\014\033\125" +
    "\036\162\037\135\040\133\052\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\164\001\001\000\002\001" +
    "\001\000\012\033\125\037\170\040\133\052\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\022\177\023\116\024\110\025\077\026\105\027\073" +
    "\030\112\031\115\032\074\033\076\042\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\033\125\034\203\035\140\036\137\037\135\040\133\044" +
    "\211\052\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\033\125\034\216\035\140\036\137\037\135\040" +
    "\133\046\215\052\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\033\125\034\221\035" +
    "\140\036\137\037\135\040\133\052\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\033\125\034\226\035\140" +
    "\036\137\037\135\040\133\052\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\242\001\001\000\002\001" +
    "\001\000\004\015\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   public void syntax_error(Symbol lexicalUnit) {
     ErrorsHandler.syntacticError((LexicalUnit)lexicalUnit);
   }
   
   public LexicalAnalyzer getLexAn() {
     return (LexicalAnalyzer)getScanner();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticAnalyzer$actions {
  private final SyntacticAnalyzer parser;

  /** Constructor */
  CUP$SyntacticAnalyzer$actions(SyntacticAnalyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action_part00000000(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= PROGRAM SeccionTipos SeccionVariables SeccionSubprogramas IBloque 
            {
              Programa RESULT =null;
		SeccionTipos aDeST = (SeccionTipos)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		SeccionVariables aDeSV = (SeccionVariables)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		SeccionSubprogramas aDeSS = (SeccionSubprogramas)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		List<Instruccion> aDeIB = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decprograma(aDeST, aDeSV, aDeSS, aDeIB); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzer$parser.done_parsing();
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SeccionTipos ::= TYPES DecTipos 
            {
              SeccionTipos RESULT =null;
		List<DecTipo> aDeDT = (List<DecTipo>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decsectipos(aDeDT); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("SeccionTipos",1, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SeccionTipos ::= 
            {
              SeccionTipos RESULT =null;
		 RESULT = Ops.decsectiposvacia(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("SeccionTipos",1, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionVariables ::= VARIABLES DecVariables 
            {
              SeccionVariables RESULT =null;
		List<DecTipo> aDeDV = (List<DecTipo>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decsecvar(aDeDV); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("SeccionVariables",2, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SeccionVariables ::= 
            {
              SeccionVariables RESULT =null;
		 RESULT = Ops.decsecvarvacia(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("SeccionVariables",2, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SeccionSubprogramas ::= SUBPROGRAMS DecSubprogramas 
            {
              SeccionSubprogramas RESULT =null;
		List<DecSubprograma> aDeDSP = (List<DecSubprograma>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decsecsubprogramas(aDeDSP); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("SeccionSubprogramas",3, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SeccionSubprogramas ::= 
            {
              SeccionSubprogramas RESULT =null;
		 RESULT = Ops.decsecsubprogramasvacia(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("SeccionSubprogramas",3, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DecTipos ::= DecTipos PYCOMA DecTipo 
            {
              List<DecTipo> RESULT =null;
		List<DecTipo> aDeDTS1 = (List<DecTipo>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		DecTipo aDeDT = (DecTipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectiposcomp(aDeDTS1, aDeDT); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecTipos",4, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DecTipos ::= DecTipo 
            {
              List<DecTipo> RESULT =null;
		DecTipo aDeDT = (DecTipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectipossimp(aDeDT); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecTipos",4, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DecTipo ::= ID DOSPUNTOS Tipo 
            {
              DecTipo RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Tipo aDeTipo = (Tipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectipostring(lexDeID, aDeTipo, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecTipo",8, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = Ops.tipoint(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = Ops.tipodouble(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = Ops.tipoboolean(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= ID 
            {
              Tipo RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.tipoid(lexDeID, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= ARRAY Tipo CAP NUMERO_NATURAL CCIERRE 
            {
              Tipo RESULT =null;
		Tipo aDeTipo = (Tipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		String lexDeNN = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = Ops.tipoarray(aDeTipo, lexDeNN); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= STRUCT LLAVEAP Campos LLAVECIERRE 
            {
              Tipo RESULT =null;
		List<DecTipo> aDeCampos = (List<DecTipo>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = Ops.tipostruct(aDeCampos); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= POINTER Tipo 
            {
              Tipo RESULT =null;
		Tipo aDeTipo = (Tipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.tipopointer(aDeTipo, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Tipo",11, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Campos ::= Campos PYCOMA Campo 
            {
              List<DecTipo> RESULT =null;
		List<DecTipo> aDeCampos1 = (List<DecTipo>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		DecTipo aDeCampo = (DecTipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectiposcomp(aDeCampos1, aDeCampo); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Campos",6, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Campos ::= Campo 
            {
              List<DecTipo> RESULT =null;
		DecTipo aDeCampo = (DecTipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectipossimp(aDeCampo); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Campos",6, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Campo ::= ID DOSPUNTOS Tipo 
            {
              DecTipo RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Tipo aDeTipo = (Tipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectipostring(lexDeID, aDeTipo, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Campo",9, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecVariables ::= DecVariables PYCOMA DecVariable 
            {
              List<DecTipo> RESULT =null;
		List<DecTipo> aDeDVS1 = (List<DecTipo>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		DecTipo aDeDV = (DecTipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectiposcomp(aDeDVS1, aDeDV); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecVariables",5, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecVariables ::= DecVariable 
            {
              List<DecTipo> RESULT =null;
		DecTipo aDeDV = (DecTipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectipossimp(aDeDV); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecVariables",5, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecVariable ::= ID DOSPUNTOS Tipo 
            {
              DecTipo RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Tipo aDeTipo = (Tipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.dectipostringvar(lexDeID, aDeTipo, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecVariable",10, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecSubprogramas ::= DecSubprogramas PYCOMA DecSubprograma 
            {
              List<DecSubprograma> RESULT =null;
		List<DecSubprograma> aDeDSPS1 = (List<DecSubprograma>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		DecSubprograma aDeDSP = (DecSubprograma)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decsubprogramacomp(aDeDSPS1, aDeDSP); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecSubprogramas",7, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DecSubprogramas ::= DecSubprograma 
            {
              List<DecSubprograma> RESULT =null;
		DecSubprograma aDeDSP = (DecSubprograma)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decsubprogramasimp(aDeDSP); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecSubprogramas",7, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DecSubprograma ::= SUBPROGRAM ID Parametros SeccionTipos SeccionVariables SeccionSubprogramas IBloque 
            {
              DecSubprograma RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-5)).value;
		List<Parametro> aDeP = (List<Parametro>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-4)).value;
		SeccionTipos aDeSTS = (SeccionTipos)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		SeccionVariables aDeSVS = (SeccionVariables)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		SeccionSubprogramas aDeSPS = (SeccionSubprogramas)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		List<Instruccion> aDeIB = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decsubprogram(lexDeID, aDeP, aDeSTS, aDeSVS, aDeSPS, aDeIB, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("DecSubprograma",12, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Parametros ::= PAP ListaParametros PCIERRE 
            {
              List<Parametro> RESULT =null;
		List<Parametro> aDeLPS = (List<Parametro>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = aDeLPS; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Parametros",13, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Parametros ::= PAP PCIERRE 
            {
              List<Parametro> RESULT =null;
		 RESULT = Ops.parametrosvacia(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Parametros",13, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaParametros ::= ListaParametros COMA Parametro 
            {
              List<Parametro> RESULT =null;
		List<Parametro> aDeLPS = (List<Parametro>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Parametro aDeP = (Parametro)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.parametroscomp(aDeLPS, aDeP); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ListaParametros",14, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListaParametros ::= Parametro 
            {
              List<Parametro> RESULT =null;
		Parametro aDeP = (Parametro)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.parametrossimp(aDeP); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ListaParametros",14, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametro ::= ID DOSPUNTOS Tipo 
            {
              Parametro RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Tipo aDeTipo = (Tipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.paramvalor(lexDeID, aDeTipo); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Parametro",15, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametro ::= AMP ID DOSPUNTOS Tipo 
            {
              Parametro RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Tipo aDeTipo = (Tipo)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.paramrefer(lexDeID, aDeTipo); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Parametro",15, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= IAsig 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= IBloque 
            {
              Instruccion RESULT =null;
		List<Instruccion> aDeIInstr = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.instbloque(aDeIInstr); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= ICond 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= IBucle 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= ILlamada 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= IRead 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= IWrite 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= INew 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= IDelete 
            {
              Instruccion RESULT =null;
		Instruccion aDeIInstr = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeIInstr; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IAsig ::= Designador ASIG Exp0 
            {
              Instruccion RESULT =null;
		Designador aDeD = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Exp aDeExp0 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.instasignacion(aDeD, aDeExp0); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IAsig",17, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IBloque ::= LLAVEAP Instrucciones LLAVECIERRE 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> aDeIS = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = aDeIS; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IBloque",32, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IBloque ::= LLAVEAP LLAVECIERRE 
            {
              List<Instruccion> RESULT =null;
		 RESULT = Ops.decinstvacia(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IBloque",32, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instrucciones ::= Instrucciones PYCOMA Instruccion 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> aDeIS = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Instruccion aDeI = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decinstcomp(aDeIS, aDeI); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instrucciones",31, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instrucciones ::= Instruccion 
            {
              List<Instruccion> RESULT =null;
		Instruccion aDeI = (Instruccion)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.decinstsimp(aDeI); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Instrucciones",31, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ICond ::= IF Casos ENDIF 
            {
              Instruccion RESULT =null;
		List<Caso> aDeCasos = (List<Caso>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = Ops.instif(aDeCasos); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ICond",18, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Casos ::= Casos CAP CCIERRE Caso 
            {
              List<Caso> RESULT =null;
		List<Caso> aDeCasos1 = (List<Caso>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		Caso aDeCaso = (Caso)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.deccasoscomp(aDeCasos1, aDeCaso); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Casos",33, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Casos ::= Caso 
            {
              List<Caso> RESULT =null;
		Caso aDeCaso = (Caso)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.deccasossimmp(aDeCaso); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Casos",33, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Caso ::= Exp0 DOSPUNTOS IBloque 
            {
              Caso RESULT =null;
		Exp aDeExp0 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		List<Instruccion> aDeIB = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.deccaso(aDeExp0, aDeIB); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Caso",34, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IBucle ::= DO Casos ENDDO 
            {
              Instruccion RESULT =null;
		List<Caso> aDeCasos = (List<Caso>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = Ops.instdo(aDeCasos); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IBucle",19, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ILlamada ::= ID Argumentos 
            {
              Instruccion RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		List<Exp> aDeArgs = (List<Exp>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.instllamada(lexDeID, aDeArgs, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ILlamada",20, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Argumentos ::= PAP ListaArgumentos PCIERRE 
            {
              List<Exp> RESULT =null;
		List<Exp> aDeListaArgs = (List<Exp>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = aDeListaArgs; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Argumentos",35, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Argumentos ::= PAP PCIERRE 
            {
              List<Exp> RESULT =null;
		 RESULT = Ops.argumentosvacia(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Argumentos",35, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ListaArgumentos ::= ListaArgumentos COMA Exp0 
            {
              List<Exp> RESULT =null;
		List<Exp> aDeListaArgs1 = (List<Exp>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		Exp aDeExp0 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.listaargumentoscomp(aDeListaArgs1, aDeExp0); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",36, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ListaArgumentos ::= Exp0 
            {
              List<Exp> RESULT =null;
		Exp aDeExp0 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.listaargumentossimp(aDeExp0); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",36, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IRead ::= READ Designador 
            {
              Instruccion RESULT =null;
		Designador aDeDesig = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.instread(aDeDesig); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IRead",21, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IWrite ::= WRITE Exp0 
            {
              Instruccion RESULT =null;
		Exp aDeExp0 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.instwrite(aDeExp0); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IWrite",22, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INew ::= NEW Designador 
            {
              Instruccion RESULT =null;
		Designador aDeDesig = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.instnew(aDeDesig); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("INew",23, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDelete ::= DELETE Designador 
            {
              Instruccion RESULT =null;
		Designador aDeDesig = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.instdelete(aDeDesig); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("IDelete",24, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Designador ::= ID 
            {
              Designador RESULT =null;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.designaid(lexDeID, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Designador",25, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Designador ::= Designador CAP Exp0 CCIERRE 
            {
              Designador RESULT =null;
		Designador aDeDesig1 = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-3)).value;
		Exp aDeExp0 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = Ops.designaarray(aDeDesig1, aDeExp0, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Designador",25, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Designador ::= Designador PUNTO ID 
            {
              Designador RESULT =null;
		Designador aDeDesig1 = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		String lexDeID = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.designacampo(aDeDesig1, lexDeID, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Designador",25, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Designador ::= Designador FLECHA 
            {
              Designador RESULT =null;
		Designador aDeDesig1 = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = Ops.designapointer(aDeDesig1, parser.getLexAn().row()); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Designador",25, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp0 ::= Exp1 OpComp Exp1 
            {
              Exp RESULT =null;
		Exp aDeExp10 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		String opDeOpComp = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		Exp aDeExp11 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.mkexp(opDeOpComp, aDeExp10, aDeExp11); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp0",26, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp0 ::= Exp1 
            {
              Exp RESULT =null;
		Exp aDeExp1 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeExp1; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp0",26, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp1 ::= Exp1 OpAditivo Exp2 
            {
              Exp RESULT =null;
		Exp aDeExp11 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		String opDeOpAditivo = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		Exp aDeExp2 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.mkexp(opDeOpAditivo, aDeExp11, aDeExp2); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp1",27, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp1 ::= Exp2 
            {
              Exp RESULT =null;
		Exp aDeExp2 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeExp2; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp1",27, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp2 ::= Exp2 OpMultiplicativo Exp3 
            {
              Exp RESULT =null;
		Exp aDeExp21 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-2)).value;
		String opDeOpMultiplicativo = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		Exp aDeExp3 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.mkexp(opDeOpMultiplicativo, aDeExp21, aDeExp3); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp2",28, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 
            {
              Exp RESULT =null;
		Exp aDeExp3 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeExp3; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp2",28, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp3 ::= OpUnario Exp3 
            {
              Exp RESULT =null;
		String opDeOpUnario = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		Exp aDeExp31 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.mkexp(opDeOpUnario, aDeExp31); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp3",29, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp3 ::= Exp4 
            {
              Exp RESULT =null;
		Exp aDeExp4 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = aDeExp4; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp3",29, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp4 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = Ops.exptrue(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp4",30, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp4 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = Ops.expfalse(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp4",30, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp4 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = Ops.expnull(); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp4",30, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp4 ::= NUMERO_NATURAL 
            {
              Exp RESULT =null;
		String lexDeNN = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.numnatural(Ops.tonaturalnum(lexDeNN)); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp4",30, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp4 ::= NUMERO_REAL 
            {
              Exp RESULT =null;
		String lexDeNR = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.numreal(Ops.torealnum(lexDeNR)); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp4",30, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp4 ::= Designador 
            {
              Exp RESULT =null;
		Designador aDeDesig = (Designador)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.peek()).value;
		 RESULT = Ops.expdesignador(aDeDesig); 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp4",30, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp4 ::= PAP Exp0 PCIERRE 
            {
              Exp RESULT =null;
		Exp aDeExp0 = (Exp)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzer$stack.elementAt(CUP$SyntacticAnalyzer$top-1)).value;
		 RESULT = aDeExp0; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("Exp4",30, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OpComp ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OpComp ::= DISTINTO 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OpComp ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OpComp ::= MAYOROIGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OpComp ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OpComp ::= MENOROIGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OpAditivo ::= MAS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpAditivo",38, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OpAditivo ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpAditivo",38, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OpAditivo ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpAditivo",38, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OpMultiplicativo ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OpMultiplicativo ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OpMultiplicativo ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OpMultiplicativo ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OpUnario ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OpUnario ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OpUnario ::= TOINT 
            {
              String RESULT =null;
		 RESULT = "toint"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OpUnario ::= TODOUBLE 
            {
              String RESULT =null;
		 RESULT = "todouble"; 
              CUP$SyntacticAnalyzer$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$SyntacticAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzer$do_action(
    int                        CUP$SyntacticAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzer$parser,
    java.util.Stack            CUP$SyntacticAnalyzer$stack,
    int                        CUP$SyntacticAnalyzer$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzer$do_action_part00000000(
                               CUP$SyntacticAnalyzer$act_num,
                               CUP$SyntacticAnalyzer$parser,
                               CUP$SyntacticAnalyzer$stack,
                               CUP$SyntacticAnalyzer$top);
    }
}

