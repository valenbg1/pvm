package pvm.compiler.synanalyzer;

import java.util.List;

import pvm.compiler.abstractsyntax.Ops;
import pvm.compiler.ErrorsHandler;
import pvm.compiler.abstractsyntax.Programa;
import pvm.compiler.abstractsyntax.designador.Designador;
import pvm.compiler.abstractsyntax.exp.Exp;
import pvm.compiler.abstractsyntax.instr.Instruccion;
import pvm.compiler.abstractsyntax.instr.cond.Caso;
import pvm.compiler.abstractsyntax.seccion.SeccionSubprogramas;
import pvm.compiler.abstractsyntax.seccion.SeccionTipos;
import pvm.compiler.abstractsyntax.seccion.SeccionVariables;
import pvm.compiler.abstractsyntax.subprog.DecSubprograma;
import pvm.compiler.abstractsyntax.subprog.param.Parametro;
import pvm.compiler.abstractsyntax.tipo.DecTipo;
import pvm.compiler.abstractsyntax.tipo.Tipo;
import pvm.compiler.lexanalyzer.LexicalAnalyzer;
import pvm.compiler.lexanalyzer.LexicalUnit;

import java_cup.runtime.*;

scan with {: return getScanner().next_token(); :};
parser code {: 
   public void syntax_error(Symbol lexicalUnit) {
     ErrorsHandler.syntacticError((LexicalUnit)lexicalUnit);
   }
   
   public LexicalAnalyzer getLexAn() {
     return (LexicalAnalyzer)getScanner();
   }
:};
init with {: 
:};

terminal PROGRAM, TYPES, STRUCT, POINTER, VARIABLES, SUBPROGRAMS, SUBPROGRAM, IF, ENDIF, DO, ENDDO, 
         MAS, MENOS, POR, DIV, MOD, AND, OR, NOT, TOINT, TODOUBLE, ASIG, IGUAL, MENOR, MAYOR, MENOROIGUAL, MAYOROIGUAL,
         DISTINTO, PYCOMA, COMA, PAP, PCIERRE, LLAVEAP, LLAVECIERRE, DOSPUNTOS, INT, BOOLEAN, DOUBLE, CAP, CCIERRE,
         PUNTO, FLECHA, AMP, TRUE, FALSE, NULL, ARRAY, READ, WRITE, NEW, DELETE;
terminal String NUMERO_NATURAL, NUMERO_REAL, ID;

non terminal Programa Programa;
non terminal SeccionTipos SeccionTipos;
non terminal SeccionVariables SeccionVariables;
non terminal SeccionSubprogramas SeccionSubprogramas;
non terminal List<DecTipo> DecTipos, DecVariables, Campos;
non terminal List<DecSubprograma> DecSubprogramas;
non terminal DecTipo DecTipo, Campo, DecVariable;
non terminal Tipo Tipo;
non terminal DecSubprograma DecSubprograma;
non terminal List<Parametro> Parametros, ListaParametros;
non terminal Parametro Parametro;
non terminal Instruccion Instruccion, IAsig, ICond, IBucle, ILlamada, IRead, IWrite, INew, IDelete;
non terminal Designador Designador;
non terminal Exp Exp0, Exp1, Exp2, Exp3, Exp4;
non terminal List<Instruccion> Instrucciones, IBloque; 
non terminal List<Caso> Casos;
non terminal Caso Caso;
non terminal List<Exp> Argumentos, ListaArgumentos;
non terminal String OpComp, OpAditivo, OpMultiplicativo, OpUnario;

Programa ::= PROGRAM SeccionTipos: aDeST SeccionVariables: aDeSV SeccionSubprogramas: aDeSS IBloque: aDeIB
	{: RESULT = Ops.decprograma(aDeST, aDeSV, aDeSS, aDeIB); :};
SeccionTipos ::= TYPES DecTipos: aDeDT
	{: RESULT = Ops.decsectipos(aDeDT); :};
SeccionTipos ::=  
	{: RESULT = Ops.decsectiposvacia(); :};
SeccionVariables ::= VARIABLES DecVariables: aDeDV
	{: RESULT = Ops.decsecvar(aDeDV); :};
SeccionVariables ::=  
	{: RESULT = Ops.decsecvarvacia(); :};
SeccionSubprogramas ::= SUBPROGRAMS DecSubprogramas: aDeDSP
	{: RESULT = Ops.decsecsubprogramas(aDeDSP); :};
SeccionSubprogramas ::=  
	{: RESULT = Ops.decsecsubprogramasvacia(); :};
	
DecTipos ::= DecTipos: aDeDTS1 PYCOMA DecTipo: aDeDT
	{: RESULT = Ops.dectiposcomp(aDeDTS1, aDeDT); :};
DecTipos ::= DecTipo: aDeDT
	{: RESULT = Ops.dectipossimp(aDeDT); :};
DecTipo ::= ID: lexDeID DOSPUNTOS Tipo: aDeTipo
	{: RESULT = Ops.dectipostring(lexDeID, aDeTipo, parser.getLexAn().row()); :};
Tipo    ::= INT
	{: RESULT = Ops.tipoint(); :};
Tipo    ::= DOUBLE
	{: RESULT = Ops.tipodouble(); :};
Tipo    ::= BOOLEAN
	{: RESULT = Ops.tipoboolean(); :};
Tipo    ::= ID: lexDeID
	{: RESULT = Ops.tipoid(lexDeID, parser.getLexAn().row()); :};
Tipo    ::= ARRAY Tipo: aDeTipo CAP NUMERO_NATURAL: lexDeNN CCIERRE
	{: RESULT = Ops.tipoarray(aDeTipo, lexDeNN); :};
Tipo    ::= STRUCT LLAVEAP Campos: aDeCampos LLAVECIERRE
	{: RESULT = Ops.tipostruct(aDeCampos); :};
Tipo    ::= POINTER Tipo: aDeTipo
	{: RESULT = Ops.tipopointer(aDeTipo, parser.getLexAn().row()); :};
Campos  ::= Campos: aDeCampos1 PYCOMA Campo: aDeCampo
	{: RESULT = Ops.dectiposcomp(aDeCampos1, aDeCampo); :};
Campos  ::= Campo: aDeCampo
	{: RESULT = Ops.dectipossimp(aDeCampo); :};
Campo   ::= ID: lexDeID DOSPUNTOS Tipo: aDeTipo
	{: RESULT = Ops.dectipostring(lexDeID, aDeTipo, parser.getLexAn().row()); :};
	
DecVariables ::= DecVariables: aDeDVS1 PYCOMA DecVariable: aDeDV
	{: RESULT = Ops.dectiposcomp(aDeDVS1, aDeDV); :};
DecVariables ::= DecVariable: aDeDV
	{: RESULT = Ops.dectipossimp(aDeDV); :};
DecVariable ::= ID: lexDeID DOSPUNTOS Tipo: aDeTipo
	{: RESULT = Ops.dectipostringvar(lexDeID, aDeTipo, parser.getLexAn().row()); :};

DecSubprogramas ::= DecSubprogramas: aDeDSPS1 PYCOMA DecSubprograma: aDeDSP
	{: RESULT = Ops.decsubprogramacomp(aDeDSPS1, aDeDSP); :};
DecSubprogramas ::= DecSubprograma: aDeDSP
	{: RESULT = Ops.decsubprogramasimp(aDeDSP); :};
DecSubprograma ::= SUBPROGRAM ID: lexDeID Parametros: aDeP SeccionTipos: aDeSTS SeccionVariables: aDeSVS SeccionSubprogramas: aDeSPS IBloque: aDeIB
	{: RESULT = Ops.decsubprogram(lexDeID, aDeP, aDeSTS, aDeSVS, aDeSPS, aDeIB, parser.getLexAn().row()); :};
Parametros ::= PAP ListaParametros: aDeLPS PCIERRE
	{: RESULT = aDeLPS; :};
Parametros ::= PAP PCIERRE
	{: RESULT = Ops.parametrosvacia(); :};
ListaParametros ::= ListaParametros: aDeLPS COMA Parametro: aDeP
	{: RESULT = Ops.parametroscomp(aDeLPS, aDeP); :};
ListaParametros ::= Parametro: aDeP
	{: RESULT = Ops.parametrossimp(aDeP); :};
Parametro ::= ID: lexDeID DOSPUNTOS Tipo: aDeTipo
	{: RESULT = Ops.paramvalor(lexDeID, aDeTipo); :};
Parametro ::= AMP ID: lexDeID DOSPUNTOS Tipo: aDeTipo
	{: RESULT = Ops.paramrefer(lexDeID, aDeTipo); :};

Instruccion ::= IAsig: aDeIInstr
	{: RESULT = aDeIInstr; :};
Instruccion ::= IBloque: aDeIInstr
	{: RESULT = Ops.instbloque(aDeIInstr); :};
Instruccion ::= ICond: aDeIInstr
	{: RESULT = aDeIInstr; :};
Instruccion ::= IBucle: aDeIInstr
	{: RESULT = aDeIInstr; :};
Instruccion ::= ILlamada: aDeIInstr
	{: RESULT = aDeIInstr; :};
Instruccion ::= IRead: aDeIInstr
	{: RESULT = aDeIInstr; :};
Instruccion ::= IWrite: aDeIInstr
	{: RESULT = aDeIInstr; :};
Instruccion ::= INew: aDeIInstr
	{: RESULT = aDeIInstr; :};
Instruccion ::= IDelete: aDeIInstr
	{: RESULT = aDeIInstr; :};
                
IAsig ::= Designador: aDeD ASIG Exp0: aDeExp0
	{: RESULT = Ops.instasignacion(aDeD, aDeExp0); :};

IBloque ::= LLAVEAP Instrucciones: aDeIS LLAVECIERRE
	{: RESULT = aDeIS; :};
IBloque ::= LLAVEAP LLAVECIERRE
	{: RESULT = Ops.decinstvacia(); :};
Instrucciones ::= Instrucciones: aDeIS PYCOMA Instruccion: aDeI
	{: RESULT = Ops.decinstcomp(aDeIS, aDeI); :};
Instrucciones ::= Instruccion: aDeI
	{: RESULT = Ops.decinstsimp(aDeI); :};
	
ICond ::= IF Casos: aDeCasos ENDIF
	{: RESULT = Ops.instif(aDeCasos); :};
Casos ::= Casos: aDeCasos1 CAP CCIERRE Caso: aDeCaso
	{: RESULT = Ops.deccasoscomp(aDeCasos1, aDeCaso); :};
Casos ::= Caso: aDeCaso
	{: RESULT = Ops.deccasossimmp(aDeCaso); :};
Caso  ::= Exp0: aDeExp0 DOSPUNTOS IBloque: aDeIB
	{: RESULT = Ops.deccaso(aDeExp0, aDeIB); :};

IBucle ::= DO Casos: aDeCasos ENDDO
	{: RESULT = Ops.instdo(aDeCasos); :};

ILlamada  ::= ID: lexDeID Argumentos: aDeArgs
	{: RESULT = Ops.instllamada(lexDeID, aDeArgs, parser.getLexAn().row()); :};
Argumentos ::= PAP ListaArgumentos: aDeListaArgs PCIERRE
	{: RESULT = aDeListaArgs; :};
Argumentos ::= PAP PCIERRE
	{: RESULT = Ops.argumentosvacia(); :};
ListaArgumentos ::= ListaArgumentos: aDeListaArgs1 COMA Exp0: aDeExp0
	{: RESULT = Ops.listaargumentoscomp(aDeListaArgs1, aDeExp0); :};
ListaArgumentos ::= Exp0: aDeExp0
	{: RESULT = Ops.listaargumentossimp(aDeExp0); :};

IRead ::= READ Designador: aDeDesig
	{: RESULT = Ops.instread(aDeDesig); :};

IWrite ::= WRITE Exp0: aDeExp0
	{: RESULT = Ops.instwrite(aDeExp0); :};

INew ::= NEW Designador: aDeDesig
	{: RESULT = Ops.instnew(aDeDesig); :};

IDelete ::= DELETE Designador: aDeDesig
	{: RESULT = Ops.instdelete(aDeDesig); :};

Designador  ::= ID: lexDeID
	{: RESULT = Ops.designaid(lexDeID, parser.getLexAn().row()); :};
Designador  ::= Designador: aDeDesig1 CAP Exp0: aDeExp0 CCIERRE
	{: RESULT = Ops.designaarray(aDeDesig1, aDeExp0, parser.getLexAn().row()); :};
Designador  ::= Designador: aDeDesig1 PUNTO ID: lexDeID
	{: RESULT = Ops.designacampo(aDeDesig1, lexDeID, parser.getLexAn().row()); :};
Designador  ::= Designador: aDeDesig1 FLECHA
	{: RESULT = Ops.designapointer(aDeDesig1, parser.getLexAn().row()); :};

Exp0 ::= Exp1: aDeExp10 OpComp: opDeOpComp Exp1: aDeExp11
	{: RESULT = Ops.mkexp(opDeOpComp, aDeExp10, aDeExp11); :};
Exp0 ::= Exp1: aDeExp1
	{: RESULT = aDeExp1; :};
Exp1 ::= Exp1: aDeExp11 OpAditivo: opDeOpAditivo Exp2: aDeExp2
	{: RESULT = Ops.mkexp(opDeOpAditivo, aDeExp11, aDeExp2); :};
Exp1 ::= Exp2: aDeExp2
	{: RESULT = aDeExp2; :};
Exp2 ::= Exp2: aDeExp21 OpMultiplicativo: opDeOpMultiplicativo Exp3: aDeExp3
	{: RESULT = Ops.mkexp(opDeOpMultiplicativo, aDeExp21, aDeExp3); :};
Exp2 ::= Exp3: aDeExp3
	{: RESULT = aDeExp3; :};
Exp3 ::= OpUnario: opDeOpUnario Exp3: aDeExp31
	{: RESULT = Ops.mkexp(opDeOpUnario, aDeExp31); :};
Exp3 ::= Exp4: aDeExp4
	{: RESULT = aDeExp4; :};
Exp4 ::= TRUE
	{: RESULT = Ops.exptrue(); :};
Exp4 ::= FALSE
	{: RESULT = Ops.expfalse(); :};
Exp4 ::= NULL
	{: RESULT = Ops.expnull(); :};
Exp4 ::= NUMERO_NATURAL: lexDeNN
	{: RESULT = Ops.numnatural(Ops.tonaturalnum(lexDeNN)); :};
Exp4 ::= NUMERO_REAL: lexDeNR
	{: RESULT = Ops.numreal(Ops.torealnum(lexDeNR)); :};
Exp4 ::= Designador: aDeDesig
	{: RESULT = Ops.expdesignador(aDeDesig); :};
Exp4 ::= PAP Exp0: aDeExp0 PCIERRE
	{: RESULT = aDeExp0; :};

OpComp ::= IGUAL
	{: RESULT = "=="; :};
OpComp ::= DISTINTO
	{: RESULT = "!="; :};
OpComp ::= MAYOR
	{: RESULT = ">"; :};
OpComp ::= MAYOROIGUAL
	{: RESULT = ">="; :};
OpComp ::= MENOR 
	{: RESULT = "<"; :};
OpComp ::= MENOROIGUAL
	{: RESULT = "<="; :};

OpAditivo ::= MAS
	{: RESULT = "+"; :};
OpAditivo ::= MENOS
	{: RESULT = "-"; :};
OpAditivo ::= OR
	{: RESULT = "or"; :};

OpMultiplicativo ::= POR
	{: RESULT = "*"; :};
OpMultiplicativo ::= DIV
	{: RESULT = "/"; :};
OpMultiplicativo ::= MOD
	{: RESULT = "%"; :};
OpMultiplicativo ::= AND
	{: RESULT = "and"; :};

OpUnario ::= MENOS
	{: RESULT = "-"; :};
OpUnario ::= NOT
	{: RESULT = "not"; :};
OpUnario ::= TOINT
	{: RESULT = "toint"; :};
OpUnario ::= TODOUBLE
	{: RESULT = "todouble"; :};
